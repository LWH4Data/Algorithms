import sys, time
sys.stdin = open('sample_in.txt')
start_time = time.time()

#=======================================================
T = int(input())\

for tc in range(1, T + 1):
    Ms, Ma = map(int, input().split())
    N, L = map(int, input().split())

    # 그래프로 주가 구현 (이차원 배열)
    graph = [list(map(int, input().split())) for _ in range(N)]



    print(graph)
    break

#=======================================================

end_time = time.time()
print('time :', end_time - start_time)

'''
< 로직 1 >
- 일단 최적해를 찾는 문제이니 '그리디'로 잡아야 할 듯 하다.

'''

'''
< 시간 복잡도 >

'''

'''
< 문제 정리 >
1. 정보 
    - 거래한 주식 
    - 해당 주식들의 매 월별 가격

2. 이론 상 실현 가능한 최대 수익에 얼마나 근접

3. 조건
    - 초기 예치금 300 <= Ms <= 1000
    - 월별 불입금액 0 <= Ma <= 100
    - 과거 데이터 기간 8 <= L <= 15 (월단위)
    - 과거 데이터 종목 수 3 <= N <= 15
    - 매월 주가 등락폭 최대 범위 -30% ~ 30%
    - 정수 개수 매매
    - 수수료 X
    - 매월 보유 주식은 항상 그 다음 달에 판매
    - 매달 반드시 매매 X
    - 0 개월차 시세 (데이터 기간이 L로 주어지면, 종목당 시세는 L + 1)
    - 거래 과정에서 100,000 이상 올라가는 경우 입력으로 주어지지 않음.
'''